module selftest {

  namespace "http://cisco.com/self-test-action";
  prefix selftest;


  import ietf-inet-types {
    prefix inet;
  }

  import tailf-common {
    prefix tailf;
  }

  import tailf-ncs {
    prefix ncs;
  }

  import ietf-yang-types {
    prefix ietf;
  }

  description "adds live-status exec commands to check the live status of your services";

  revision 2017-01-23 {
    description
      "Renamed package to selftest
       hniska@cisco.com";
  }

  revision 2016-12-05 {
    description
      "Renamed package to selftest
       hniska@cisco.com";
  }

  revision 2016-10-20 {
    description
      "Rewrite v2.1
       hniska@cisco.com";
  }

  revision 2016-09-20 {
    description
      "Rewrite v2
       hniska@cisco.com";
  }

  revision 2016-09-14 {
    description
      "Initial revision.
       hniska@cisco.com";
  }

  //This grouping should be used in your service.
  grouping selftest-result {
    container selftest-result {
      tailf:info "last results for the service selftest action";
      config false;
      list command {
          key name;
          leaf name {
              type string;
              config false;
          }
          leaf result {
              type string;
              config false;
          }
          leaf time {
              type string;
              config false;
          }
      }
    }
  }

  list selftest {
      key name;
      leaf name {
          type string;
      }

      leaf service {
          type ietf:xpath1.0;
          mandatory true;
          tailf:info "Path to the service where the selftest result will be stored";
      }

      tailf:action execute {
        tailf:actionpoint selftest;
        input {
          leaf command {
            mandatory true;
            type leafref {
                path ../../commands/name;
            }
          }
        }
        output {
          leaf result {
            type string;
          }
        }
      }

      list commands {
        key name;
        leaf name {
            type string;
        }
        leaf-list devices {
            min-elements 1;
            type leafref {
                path /ncs:devices/ncs:device/ncs:name;
            }
        }

        leaf command {
            when not(/ncs:devices/ncs:device[ncs:name=current()/../devices]/ncs:module[ncs:name='junos-rpc']);
            mandatory true;
            type enumeration {
              enum ping;
              enum show;
              enum copy;
              enum any;
              enum rpc;
            }
        }

        container ping {
          when /ncs:devices/ncs:device[ncs:name=current()/../devices]/ncs:module[ncs:name='junos-rpc'];
          description "Ping remote target";
          container input {
            leaf count {
              type uint32;
              description "Number of ping requests to send";
            }
            leaf wait {
              type uint32;
              description "Maximum wait time after sending final packet";
            }
            leaf no-resolve {
              type empty;
              description "Don't attempt to print addresses symbolically";
            }
            leaf rapid {
              type empty;
              description "Send requests rapidly (default count of 5)";
            }
            leaf record-route {
              type empty;
              description "Record and report packet's path (IPv4)";
            }
            leaf detail {
              type empty;
              description "Display incoming interface of received packet";
            }
            leaf do-not-fragment {
              type empty;
              description "Don't fragment echo request packets (IPv4)";
            }
            leaf loose-source {
              type string;
              description "Intermediate loose source route entry (IPv4)";
            }
            leaf interface {
              type string;
              description "Source interface (multicast, all-ones, unrouted packets)";
            }
            leaf interval {
              type uint32;
              description "Delay between ping requests";
            }
            leaf source {
              type string;
              description "Source address of echo request";
            }
            leaf pattern {
              type string;
              description "Hexadecimal fill pattern";
            }
            leaf size {
              type uint32;
              description "Size of request packets";
            }
            leaf strict {
              type empty;
              description "Use strict source route option (IPv4)";
            }
            leaf strict-source {
              type empty;
              description "Intermediate strict source route entry (IPv4)";
            }
            leaf ttl {
              type uint32;
              description "IP time-to-live value (IPv6 hop-limit value)";
            }
            leaf verbose {
              type empty;
              description "Display detailed output";
            }
            leaf tos {
              type string;
              description "IP type-of-service value";
            }
            leaf bypass-routing {
              type empty;
              description "Bypass routing table, use specified interface";
            }
            leaf inet {
              type empty;
              description "Force ping to IPv4 destination";
            }
            leaf inet6 {
              type empty;
              description "Force ping to IPv6 destination";
            }
            leaf routing-instance {
              type string;
              description "Routing instance for ping attempt";
            }
            leaf mac-address {
              type ietf:mac-address;
              description "MAC address of the nexthop in xx:xx:xx:xx:xx:xx format";
            }
            leaf host {
              type string;
              description "Hostname or IP address of remote host";
              mandatory true;
            }
            leaf logical-system {
              type string;
              description "Name of logical system";
            }
          }
          container output {
            container ping-results {
              leaf target-host {
                type string;
              }
              leaf target-ip {
                type inet:ip-address;
              }
              leaf packet-size {
                type uint32;
              }

              list probe-result {
                key probe-index;
                leaf probe-index {
                  type uint32;
                }
                leaf probe-success {
                  type empty;
                }
                leaf sequence-number {
                  type uint32;
                }
                leaf ip-address {
                  type inet:ip-address;
                }
                leaf time-to-live {
                  type uint32;
                }
                leaf response-size {
                  type uint32;
                }
                leaf rtt {
                  type uint32;
                }
                leaf ingress-interface {
                  type string;
                }
              }

              container probe-results-summary {
                leaf probes-sent {
                  type uint32;
                }
                leaf responses-received {
                  type uint32;
                }
                leaf packet-loss {
                  type uint32 {
                    range "0..100";
                  }
                }
                leaf rtt-minimum {
                  type uint32;
                }
                leaf rtt-maximum {
                  type uint32;
                }
                leaf rtt-average {
                  type uint32;
                }
                leaf rtt-stddev {
                  type uint32;
                }
              }

              choice ping-result {
                leaf ping-failure {
                  type string;
                }
                leaf ping-success {
                  type empty;
                }
              }
            }
          }
        }

        leaf arguments {
            when not(/ncs:devices/ncs:device[ncs:name=current()/../devices]/ncs:module[ncs:name='junos-rpc']);
            mandatory true;
            type string;
        }

        leaf failstring {
            type string;
            tailf:info "regular expression for a fail result";
        }
      }
  }
}
